package mining

import (
	"fmt"
	"log"
	"strconv"

	"sync"

	"math"

	"github.com/astaxie/beego/logs"
	"github.com/btcboost/copernicus/blockchain"
	"github.com/btcboost/copernicus/consensus"
	"github.com/btcboost/copernicus/core"
	"github.com/btcboost/copernicus/mempool"
	"github.com/btcboost/copernicus/net/msg"
	"github.com/btcboost/copernicus/policy"
	"github.com/btcboost/copernicus/utils"
	"github.com/google/btree"
)

/* getblocktemplate() generates json string
type AutoGenerated struct {
	Capabilities []string `json:"capabilities"`
	Version      int      `json:"version"`
	Rules        []string `json:"rules"`
	Vbavailable  struct {
	} `json:"vbavailable"`
	Vbrequired        int    `json:"vbrequired"`
	Previousblockhash string `json:"previousblockhash"`
	Transactions      []struct {
		Data    string        `json:"data"`
		Txid    string        `json:"txid"`
		Hash    string        `json:"hash"`
		Depends []interface{} `json:"depends"`
		Fee     int           `json:"fee"`
		Sigops  int           `json:"sigops"`
	} `json:"transactions"`
	Coinbaseaux struct {
		Flags string `json:"flags"`
	} `json:"coinbaseaux"`
	Coinbasevalue int      `json:"coinbasevalue"`
	Longpollid    string   `json:"longpollid"`
	Target        string   `json:"target"`
	Mintime       int      `json:"mintime"`
	Mutable       []string `json:"mutable"`
	Noncerange    string   `json:"noncerange"`
	Sigoplimit    int      `json:"sigoplimit"`
	Sizelimit     int      `json:"sizelimit"`
	Curtime       int      `json:"curtime"`
	Bits          string   `json:"bits"`
	Height        int      `json:"height"`
}
*/

const (
	// Limit the number of attempts to add transactions to the block when it is
	// close to full; this is just a simple heuristic to finish quickly if the
	// mempool has a lot of entries.
	maxConsecutiveFailures = 1000
)

var bt *BlockTemplate

type BlockTemplate struct {
	sync.Mutex
	block         *core.Block
	txFees        []utils.Amount
	txSigOpsCount []int
}

func newBlockTemplate() *BlockTemplate {
	return &BlockTemplate{
		block:         core.NewBlock(),
		txFees:        make([]utils.Amount, 0),
		txSigOpsCount: make([]int, 0),
	}
}

// BlockAssembler Generate a new block, without valid proof-of-work
type BlockAssembler struct {
	bt                    *BlockTemplate
	block                 *core.Block
	maxGeneratedBlockSize uint64
	blockMinFeeRate       utils.FeeRate
	blockSize             uint64
	blockTx               uint64
	blockSigOps           uint64
	fees                  utils.Amount
	inBlock               map[utils.Hash]*mempool.TxEntry
	height                int
	lockTimeCutoff        int64
	chainParams           *msg.BitcoinParams
	lastFewTxs            int
	blockFinished         bool
}

func NewBlockAssembler(params *msg.BitcoinParams) *BlockAssembler {
	ba := new(BlockAssembler)
	ba.chainParams = params
	v := utils.GetArg("-blockmintxfee", int64(policy.DefaultBlockMinTxFee))
	ba.blockMinFeeRate = utils.NewFeeRate(v) // todo confirm
	ba.maxGeneratedBlockSize = ComputeMaxGeneratedBlockSize(core.ActiveChain.Tip())
	return ba
}

func (ba *BlockAssembler) resetBlock() {
	ba.inBlock = make(map[utils.Hash]*mempool.TxEntry)
	// Reserve space for coinbase tx.
	ba.blockSize = 1000
	ba.blockSigOps = 100

	// These counters do not include coinbase tx.
	ba.blockTx = 0
	ba.fees = 0
	ba.lastFewTxs = 0
	ba.blockFinished = false
}

func (ba *BlockAssembler) TestPackage(packageSize uint64, packageSigops int64, add *core.Tx) bool {
	blockSizeWithPackage := ba.blockSize + packageSize
	if blockSizeWithPackage >= ba.maxGeneratedBlockSize {
		return false
	}
	if ba.blockSigOps+uint64(packageSigops) >= consensus.GetMaxBlockSigOpsCount(blockSizeWithPackage) {
		return false
	}
	return true
}

func (ba *BlockAssembler) addToBlock(te *mempool.TxEntry) {
	ba.block.Txs = append(ba.block.Txs, te.Tx)
	ba.bt.txFees = append(ba.bt.txFees, utils.Amount(te.TxFee))
	ba.bt.txSigOpsCount = append(ba.bt.txSigOpsCount, te.SigOpCount)
	ba.blockSize += uint64(te.TxSize)
	ba.blockTx++
	ba.blockSigOps += uint64(te.SigOpCount)
	ba.fees += utils.Amount(te.TxFee)
	ba.inBlock[te.Tx.Hash] = te
}

// This function convert MaxBlockSize from byte to
// MB with a decimal precision one digit rounded down
// E.g.
// 1660000 -> 1.6
// 2010000 -> 2.0
// 1000000 -> 1.0
// 230000  -> 0.2
// 50000   -> 0.0
// NB behavior for EB<1MB not standardized yet still
// the function applies the same algo used for
// EB greater or equal to 1MB
func getSubVersionEB(maxBlockSize uint64) string {
	// Prepare EB string we are going to add to SubVer:
	// 1) translate from byte to MB and convert to string
	// 2) limit the EB string to the first decimal digit (floored)
	v := int(maxBlockSize / (consensus.OneMegabyte))
	toStr := strconv.Itoa(v)
	ret := v / 10
	if ret <= 0 {
		return "0." + toStr
	}
	length := len(toStr)
	return toStr[:length-1] + "." + toStr[length-1:]
}

func ComputeMaxGeneratedBlockSize(indexPrev *core.BlockIndex) uint64 {
	// Block resource limits
	// If -blockmaxsize is not given, limit to DEFAULT_MAX_GENERATED_BLOCK_SIZE
	// If only one is given, only restrict the specified resource.
	// If both are given, restrict both.
	maxGeneratedBlockSize := uint64(utils.GetArg("-blockmaxsize", int64(policy.DefaultMaxGeneratedBlockSize)))

	// Limit size to between 1K and MaxBlockSize-1K for sanity:
	csize := policy.DefaultMaxBlockSize - 1000
	if csize < maxGeneratedBlockSize {
		maxGeneratedBlockSize = csize
	}
	if 1000 > maxGeneratedBlockSize {
		maxGeneratedBlockSize = 1000
	}
	return maxGeneratedBlockSize
}

// This transaction selection algorithm orders the mempool based on feerate of a
// transaction including all unconfirmed ancestors. Since we don't remove
// transactions from the mempool as we select them for block inclusion, we need
// an alternate method of updating the feerate of a transaction with its
// not-yet-selected ancestors as we go. This is accomplished by walking the
// in-mempool descendants of selected transactions and storing a temporary
// modified state in mapModifiedTxs. Each time through the loop, we compare the
// best transaction in mapModifiedTxs with the next transaction in the mempool
// to decide what transaction package to work on next.
func (ba *BlockAssembler) addPackageTxs(descendantsUpdated *int) {
	pool := blockchain.GMemPool
	pool.RLock()
	defer pool.RUnlock()

	consecutiveFailed := 0

	cloneTxSet := pool.TxByAncestorFeeRateSort.Clone()
	//pendingTx := make(map[utils.Hash]mempool.TxEntry)
	failedTx := make(map[utils.Hash]mempool.TxEntry)

	for {
		entry := mempool.TxEntry(cloneTxSet.DeleteMax().(mempool.EntryAncestorFeeRateSort))
		if _, ok := ba.inBlock[entry.Tx.Hash]; ok {
			continue
		}
		if _, ok := failedTx[entry.Tx.Hash]; ok {
			continue
		}

		packageSize := entry.SumSizeWitAncestors
		packageFee := entry.SumFeeWithAncestors
		packageSigOps := entry.SumSigOpCountWithAncestors
		if packageFee < ba.blockMinFeeRate.GetFee(int(packageSize)) {
			break
		}

		if !ba.TestPackage(uint64(packageSize), packageSigOps, nil) {
			consecutiveFailed++
			if consecutiveFailed > maxConsecutiveFailures &&
				ba.blockSize > ba.maxGeneratedBlockSize-1000 {
				break
			}
			continue
		}
		noLimit := uint64(math.MaxUint64)
		ancestors, _ := pool.CalculateMemPoolAncestors(entry.Tx, noLimit, noLimit, noLimit, noLimit, false)
		ba.onlyUnconfirmed(ancestors)
		ancestors[&entry] = struct{}{}
		if !ba.testPackageTransactions(ancestors) {
			continue
		}

		consecutiveFailed = 0
		addset := make(map[utils.Hash]mempool.TxEntry)
		for add := range ancestors {
			ba.addToBlock(add)
			addset[add.Tx.Hash] = *add
		}
		*descendantsUpdated += ba.UpdatePackagesForAdded(pool, addset, nil, cloneTxSet)
	}
}

func (ba *BlockAssembler) CreateNewBlock(script core.Script) *BlockTemplate {
	timeStart := utils.GetMockTimeInMicros()

	ba.resetBlock()
	ba.bt = newBlockTemplate()

	// Pointer for convenience.
	ba.block = ba.bt.block

	// add dummy coinbase tx as first transaction
	ba.block.Txs = make([]*core.Tx, 0, 100000)
	ba.block.Txs = append(ba.block.Txs, core.NewTx())
	ba.bt.txFees = make([]utils.Amount, 0, 100000)
	ba.bt.txFees = append(ba.bt.txFees, -1)
	ba.bt.txSigOpsCount = make([]int, 0, 100000)
	ba.bt.txSigOpsCount = append(ba.bt.txSigOpsCount, -1)

	// todo LOCK2(cs_main);
	indexPrev := core.ActiveChain.Tip()
	ba.height = indexPrev.Height + 1
	ba.block.BlockHeader.Version = int32(blockchain.ComputeBlockVersion(indexPrev, msg.ActiveNetParams, nil))
	// -regtest only: allow overriding block.nVersion with
	// -blockversion=N to test forking scenarios
	if ba.chainParams.MineBlocksOnDemands {
		ba.block.BlockHeader.Version = int32(utils.GetArg("-blockversion", int64(ba.block.BlockHeader.Version)))
	}
	ba.block.BlockHeader.Time = uint32(utils.GetAdjustedTime())
	ba.maxGeneratedBlockSize = ComputeMaxGeneratedBlockSize(indexPrev)
	if consensus.StandardLocktimeVerifyFlags&consensus.LocktimeMedianTimePast != 0 {
		ba.lockTimeCutoff = indexPrev.GetMedianTimePast()
	} else {
		ba.lockTimeCutoff = int64(ba.block.BlockHeader.Time)
	}

	blockchain.GMemPool.RLock()
	defer blockchain.GMemPool.RUnlock()
	descendantsUpdated := 0
	ba.addPackageTxs(&descendantsUpdated)

	time1 := utils.GetMockTimeInMicros()
	//lastBlockTx := ba.blockTx
	//lastBlockSize := ba.blockSize

	// Create coinbase transaction
	coinbaseTx := core.NewTx()
	coinbaseTx.Ins = make([]*core.TxIn, 1)
	sig := core.Script{}
	sig.PushInt64(int64(ba.height))
	sig.PushOpCode(core.OP_0)
	coinbaseTx.Ins[0] = core.NewTxIn(&core.OutPoint{Hash: utils.HashZero, Index: 0xffffffff}, sig.GetScriptByte())
	coinbaseTx.Outs = make([]*core.TxOut, 1)
	value := ba.fees + blockchain.GetBlockSubsidy(ba.height, ba.chainParams)
	coinbaseTx.Outs[0] = core.NewTxOut(int64(value), script.GetScriptByte())
	ba.block.Txs[0] = coinbaseTx
	ba.bt.txFees[0] = -1 * ba.fees

	serializeSize := ba.block.SerializeSize()
	logs.Info("CreateNewBlock(): total size: %d txs: %d fees: %d sigops %d\n",
		serializeSize, ba.blockTx, ba.fees, ba.blockSigOps)

	// Fill in header.
	ba.block.BlockHeader.HashPrevBlock = *indexPrev.GetBlockHash()
	UpdateTime(ba.block, ba.chainParams, indexPrev)
	pow := blockchain.Pow{}
	ba.block.BlockHeader.Bits = pow.GetNextWorkRequired(indexPrev, &ba.block.BlockHeader, ba.chainParams)
	ba.block.BlockHeader.Nonce = 0
	ba.bt.txSigOpsCount[0] = ba.block.Txs[0].GetSigOpCountWithoutP2SH()

	state := core.ValidationState{}
	if !blockchain.TestBlockValidity(ba.chainParams, &state, ba.block, indexPrev, false, false) {
		panic(fmt.Sprintf("CreateNewBlock(): TestBlockValidity failed: %s", state.FormatStateMessage()))
	}

	time2 := utils.GetMockTimeInMicros()
	log.Print("bench", "debug", "CreateNewBlock() packages: %.2fms (%d packages, %d "+
		"updated descendants), validity: %.2fms (total %.2fms)\n", 0.001*float64(time1-timeStart),
		ba.blockTx, descendantsUpdated, 0.001*float64(time2-time1), 0.001*float64(time2-timeStart))

	bt = ba.bt // blocktemplate cache
	return ba.bt
}

func UpdateTime(bl *core.Block, params *msg.BitcoinParams, indexPrev *core.BlockIndex) int64 {
	oldTime := int64(bl.BlockHeader.Time)
	var newTime int64
	mt := indexPrev.GetMedianTimePast() + 1
	at := utils.GetAdjustedTime()
	if mt > at {
		newTime = mt
	} else {
		newTime = at
	}
	if oldTime < newTime {
		bl.BlockHeader.Time = uint32(newTime)
	}

	// Updating time can change work required on testnet:
	if params.FPowAllowMinDifficultyBlocks {
		pow := blockchain.Pow{}
		bl.BlockHeader.Bits = pow.GetNextWorkRequired(indexPrev, &bl.BlockHeader, params)
	}
	return newTime - oldTime
}

func (ba *BlockAssembler) onlyUnconfirmed(entrySet map[*mempool.TxEntry]struct{}) {
	for entry := range entrySet {
		if _, ok := ba.inBlock[entry.Tx.Hash]; ok {
			delete(entrySet, entry)
		}
	}
}

// Perform transaction-level checks before adding to block:
// - transaction finality (locktime)
// - serialized size (in case -blockmaxsize is in use)
func (ba *BlockAssembler) testPackageTransactions(entrySet map[*mempool.TxEntry]struct{}) bool {
	potentialBlockSize := ba.blockSize
	for entry := range entrySet {
		state := core.ValidationState{}
		if blockchain.ContextualCheckTransaction(ba.chainParams, entry.Tx, &state, ba.height, ba.lockTimeCutoff) {
			return false
		}

		if potentialBlockSize+uint64(entry.TxSize) >= ba.maxGeneratedBlockSize {
			return false
		}
		potentialBlockSize += uint64(entry.TxSize)
	}

	return true
}

func (ba *BlockAssembler) UpdatePackagesForAdded(pool *mempool.TxMempool, alreadyAdded map[utils.Hash]mempool.TxEntry,
	mapModifiedTx map[utils.Hash]*mempool.TxEntry, sortTree *btree.BTree) int {

	nDescendantsUpdated := 0
	for _, entry := range alreadyAdded {
		descendants := make(map[*mempool.TxEntry]struct{})
		pool.CalculateDescendants(&entry, descendants)

		for desc := range descendants {
			if _, ok := alreadyAdded[desc.Tx.Hash]; ok {
				continue
			}
			nDescendantsUpdated++
			sortTree.Delete(mempool.EntryAncestorFeeRateSort(*desc))
			desc.SumFeeWithAncestors -= entry.SumFeeWithAncestors
			desc.SumSigOpCountWithAncestors -= entry.SumSigOpCountWithAncestors
			desc.SumSizeWitAncestors -= entry.SumSizeWitAncestors
			sortTree.ReplaceOrInsert(mempool.EntryAncestorFeeRateSort(*desc))
		}
	}

	return nDescendantsUpdated
}
